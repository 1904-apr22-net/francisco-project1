# ASP.NET Core
# Build and test ASP.NET Core projects targeting .NET Core.
# Add steps that run tests, create a NuGet package, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/dotnet-core

trigger:
- master

pool:
  vmImage: 'ubuntu-latest'

variables:
  buildConfiguration: 'Release'
  solutionPath: 'HardwareStore'

steps:

- task: SonarCloudPrepare@1
  inputs:
    SonarCloud: 'sonarcloud-guerrerof'
    organization: 'franciscog123-github'
    scannerMode: 'MSBuild'
    projectKey: 'guerrerof1904HardwareStore'

- script: dotnet build --configuration $(buildConfiguration) $(solutionPath)
  displayName: 'dotnet build $(buildConfiguration) $(solutionPath)'


# do this after other tasks such as building
- task: DotNetCoreCLI@2
  inputs:
    command: test
    projects: '**/*Tests/*.csproj'
    arguments: '--configuration $(buildConfiguration)'

- task: SonarCloudAnalyze@1
  inputs: {}

- task: SonarCloudPublish@1
  inputs:
    pollingTimeoutSec: '300'

    # ...
# do this after your tests have run
#- script: dotnet test <HardwareStore.Tests.csproj> --logger trx
#- task: PublishTestResults@2
#  condition: succeededOrFailed()
#  inputs:
#    testRunner: VSTest
#    testResultsFiles: '**/*.trx'

# do this after you've built your app, near the end of your pipeline in most cases
# for example, you do this before you deploy to an Azure web app on Windows
- task: DotNetCoreCLI@2
  inputs:
    command: publish
    publishWebProjects: True
    arguments: '--configuration $(BuildConfiguration) --output $(Build.ArtifactStagingDirectory)'
    zipAfterPublish: True

- task: AzureRmWebAppDeployment@4
  inputs:
    ConnectionType: 'AzureRM'
    azureSubscription: 'Project1Connection'
    appType: 'webApp'
    WebAppName: '1904-guerrerof-hardwarestore'
    packageForLinux: '$(Build.ArtifactStagingDirectory)/**/*.zip'

- task: PublishBuildArtifacts@1
  inputs:
    PathtoPublish: '$(Build.ArtifactStagingDirectory)'
    ArtifactName: 'drop'
    publishLocation: 'Container'
